<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[lfc博客]]></title><description><![CDATA[lfc博客]]></description><link>https://lifengchuan2008.github.io</link><generator>RSS for Node</generator><lastBuildDate>Fri, 02 Dec 2016 10:46:12 GMT</lastBuildDate><atom:link href="https://lifengchuan2008.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Cloudfiy  rabbitmq 迁移]]></title><description><![CDATA[<div class="listingblock">
<div class="title">1、安装rabbitMQ</div>
<div class="content">
<pre>$ apt-get instal rabbitmq-server
$ rabbitmqctl add_user cloudify c10udify
$ rabbitmqctl  set_permissions -p / cloudify  '.*' '.*' '.*'</pre>
</div>
</div>
<div class="paragraph">
<p>2、cloudify 相关配置</p>
</div>
<div class="paragraph">
<p>修改celeryd-cloudify-management 中的run脚本</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>增加BROKER_IP 环节变量 export BROKER_IP="192.168.100.3"</p>
</li>
<li>
<p>修改 BROKER_URL</p>
<div class="literalblock">
<div class="content">
<pre>export BROKER_URL="amqp://cloudify:c10udify@$BROKER_IP:5672//"</pre>
</div>
</div>
</li>
<li>
<p>修改 env/bin/celery worker的 broker 参数</p>
<div class="literalblock">
<div class="content">
<pre>--broker=$BROKER_URL \</pre>
</div>
</div>
</li>
<li>
<p>修改rieman中run 脚本</p>
<div class="literalblock">
<div class="content">
<pre>vim /etc/service/riemann/run</pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>增加RABBITMQ_HOST 环节变量</p>
<div class="literalblock">
<div class="content">
<pre>export  RABBITMQ_HOST="192.168.100.3"</pre>
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>修改logstash config配置</p>
<div class="literalblock">
<div class="content">
<pre>vim /etc/service/logstash/config.conf</pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>修改rabbitmq host 地址</p>
</li>
</ul>
</div>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre>rabbitmq {
      queue =&gt; "cloudify-logs"
     host =&gt; "192.168.100.3"
    durable =&gt; "true"
    auto_delete =&gt; "true"
    exclusive =&gt; "false"
     user =&gt; "cloudify"
       password =&gt; "c10udify"
  }

   rabbitmq {
     queue =&gt; "cloudify-events"
     host =&gt; "192.168.100.3"
     durable =&gt; "true"
       auto_delete =&gt; "true"
      exclusive =&gt; "false"
       user =&gt; "cloudify"
      password =&gt; "c10udify"
   }</pre>
</div>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>修改cloudif manager 中的python配置
vim /opt/manager/env/lib/python2.7/site-packages/manager_rest/config.py</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>修改 _amqp_address 变量
class Config(object):</p>
</div>
<div class="literalblock">
<div class="content">
<pre>    def __init__(self):
        self._db_address = 'localhost'
        self._db_port = 9200
        self._amqp_address = '192.168.100.3'
        self._amqp_username = 'cloudify'
        self._amqp_password = 'c10udify'
修改 celeryd-cloudify-management env目录中python代码
vim /etc/service/celeryd-cloudify-management/env/lib/python2.7/site-packages/cloudify/amqp_client.py</pre>
</div>
</div>
<div class="paragraph">
<p>修改 amqp_client 中rabbitmq ip从BROKER_IP环境变量中取
import os</p>
</div>
<div class="paragraph">
<p>class AMQPClient(object):</p>
</div>
<div class="literalblock">
<div class="content">
<pre>events_queue_name = 'cloudify-events'
logs_queue_name = 'cloudify-logs'</pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>   def __init__(self):
       self.events_queue = None
       self.logs_queue = None
       credentials = &gt; pika.PlainCredentials('cloudify', &gt;'c10udify')
       BROKER_IP=os.environ.get('BROKER_&gt;IP', '127.0.0.1')
       print 'cloudify common &gt;,broker_ip:'+BROKER_IP
      self.connection = &gt;pika.BlockingConnection(
           &gt;pika.ConnectionParameters(host=BROKER_IP,
                                     &gt;credentials=credentials))
修改agent目录下的 python代码
cd /opt/manager/resources/packages/agents 解压 Ubuntu-trusty-agent.tar.gz tar xzf Ubuntu-trusty-agent.tar.gz vim CloudifyAgent/env/lib/python2.7/site-packages/cloudify/amqp_client.py
修改 amqp_client 中rabbitmq ip从BROKER_IP环境变量中取
import os</pre>
</div>
</div>
<div class="paragraph">
<p>class AMQPClient(object):</p>
</div>
<div class="literalblock">
<div class="content">
<pre>events_queue_name = 'cloudify-events'
logs_queue_name = 'cloudify-logs'</pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>   def __init__(self):
       self.events_queue = None
       self.logs_queue = None
       credentials = &gt; pika.PlainCredentials('cloudify', &gt;'c10udify')
       BROKER_IP=os.environ.get('BROKER_&gt;IP', '127.0.0.1')
       print 'cloudify common &gt;,broker_ip:'+BROKER_IP
      self.connection = &gt;pika.BlockingConnection(
           &gt;pika.ConnectionParameters(host=BROKER_IP,
                                     &gt;credentials=credentials))
修改 cloudify manager resources 中templae配置
cd /opt/manager/resources/packages/templates vim Ubuntu-celeryd-cloudify.conf.template</pre>
</div>
</div>
<div class="paragraph">
<p>修改export BROKER_IP="192.168.100.3"
修改已安装deployment 相应的配置
cd /etc/default 找到celeryd-开头的文件，将文件中的BROKER_IP 和 celery broker 参数修改了。</p>
</div>]]></description><link>https://lifengchuan2008.github.io/2016/12/02/Cloudfiy-rabbitmq.html</link><guid isPermaLink="true">https://lifengchuan2008.github.io/2016/12/02/Cloudfiy-rabbitmq.html</guid><category><![CDATA[cloudify]]></category><category><![CDATA[ rabbitmq]]></category><category><![CDATA[ code]]></category><pubDate>Fri, 02 Dec 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[代码提交规范]]></title><description><![CDATA[<div class="sect2">
<h3 id="__strong_strong"><strong>一、分支</strong></h3>
<div class="literalblock">
<div class="content">
<pre>   分支是 Git 的核心概念，同时 Git Workflow 也是基于分支进行操作.
当新增功能或者修复bug时需要增加一个分支，这样不会影响主分支（master）的代码，
直到分支代开发完成测试通过，通过Merge Request 合并到master分支。
master分支是受保护的不是每个都可以修改这个分支，以及拥有审批merge request 的权利的。</pre>
</div>
</div>
<div class="ulist">
<div class="title">分支类别</div>
<ul>
<li>
<p>master分支：完成一次release都要将代码合并到该分支，该分支任何时候都要处于可部署状态。</p>
</li>
<li>
<p>功能分支：为了开发某种特定功能，从master分支分离出来的分支；开发完成后通过 <strong>merge request</strong>合并到master分支。</p>
<div class="ulist">
<ul>
<li>
<p>热修复分支：从master分离出来的分支，用于修复紧急bug；开发完成后通过 <strong>merge request</strong>合并到master分支。</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="ulist">
<div class="title">分支命名规范</div>
<ul>
<li>
<p>功能分支以“feature-*”开头</p>
</li>
<li>
<p>线上紧急修改的bug称为hotfix，以“hotfix-*”开头</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="__strong_commit_strong"><strong>二、提交 commit 信息</strong></h3>
<div class="literalblock">
<div class="content">
<pre>提信息是一件值得注重的事情. 当你提交代码时，Git 会跟踪代码的改变和对应的 commit
信息，这就是你工作的隐形记录. 当你的小伙伴在查阅代码的时候，清晰的
commit 信息会让他们迅速地明白 你做了什么，以及为什么这样做.</pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre> commit 规范
- add -新增需求
- fix -修复 bug
- update -更新代码
- change -修改代码</pre>
</div>
</div>
<div class="paragraph">
<p>小改动，一句 commit 信息说明
大改动，新建 issue 说明情况，方案，变化:</p>
</div>
<div class="paragraph">
<p>git commit -m 'fix #[issue number]: [Short summary of the change].'</p>
</div>
</div>
<div class="sect2">
<h3 id="__strong_strong_2"><strong>三、粒度控制</strong></h3>
<div class="paragraph">
<p>代码的提交，以完成一个独立的功能单元为粒度. 切忌粒度过大或过小，比如完成多个功能或新增一个文件的提交，这不是一个推荐的做法. 粒度的关键在于，提交的代码为独立的功能单元，以便今后通过提交信息快速定位，进行回滚或合并分支.</p>
</div>
<div class="literalblock">
<div class="content">
<pre> ### **四、功能分支**
- 创建一个功能分支</pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>  &gt; ```
  &gt; # 获取maste最新代码
  &gt; $ git checkout  master
  &gt; $ git pull
  &gt; # 新建功能分支
  &gt; $ git checkout  -b  feature-amp-mgr
  &gt; 切换到一个新分支 'feature-amp-mgr'
  &gt;
  &gt; ```
  #### 功能分支要保持与master代码的同步
  &gt; ```
  &gt; # 获取maste最新代码
  &gt; $ git checkout  master
  &gt; $ git pull
  &gt; # 切换分支
  &gt; $ git checkout    feature-amp-mgr
  &gt; # 将master分支代码合并到功能分支
  &gt; $ git  merge --no-ff  master
  &gt; ```
- 完成一个功能分支</pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>  &gt; ```
&gt; $ git add .
&gt; $ git commit  -m '简短描述做了什么修改'
&gt; $ git push
&gt; ```
  新建“merge request”将代码合并到master分支，完成合并后删除-amp-mgr分支</pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; ```
&gt;#删除feature-amp-mgr分支
&gt; $ git branch -D feature-amp-mgr
&gt; ```</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="__strong_hotfix_strong"><strong>五、hotfix分支</strong></h3>
<div class="paragraph">
<p>一般线上出现严重bug需要修复的时候，需要新建一个hotfix分支。hotfix是基于master分支的，修复完成后将代码合并到master分支。
  hotfix分支命名以hotfix-开头
-  新建hotfix-1.2.1 分支</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; ```
&gt; # 新建hotfix-1.2.1分支
&gt; $ git checkout  -b  hotfix-1.2.1 master
&gt; 切换到一个新分支 'hotfix-1.2.1'
&gt;
&gt; ```</pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>完成hotfix-1.2.1 分支</p>
<div class="literalblock">
<div class="content">
<pre>&gt; ```
&gt; $ git add .
&gt; $ git commit  -m '简短描述做了什么修改'
&gt; $ git push
&gt; ```
新建“merge request”将代码合并到master分支，完成合并后删除hotfix-1.2.1分支</pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>   &gt; ```
   &gt;#删除hotfix-1.2.1分支
   &gt; $ git branch -D hotfix-1.2.1
   &gt; ```
### **六、Issue**
   #### Issue 用于 Bug追踪和需求管理。建议先新建 Issue，再新建对应的功能分支。功能分支总是为了解决一个或多个 Issue。</pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>开发完成后，在提交说明里面，可以写上"fixes #14"或者"closes #67"。Github规定，
只要commit message里面有下面这些动词 + 编号，就会关闭对应的issue。</pre>
</div>
</div>
</li>
</ul>
</div>
<div class="quoteblock">
<blockquote>
<div class="ulist">
<ul>
<li>
<p>close</p>
</li>
<li>
<p>closes</p>
</li>
<li>
<p>closed</p>
</li>
<li>
<p>fix</p>
</li>
<li>
<p>fixes</p>
</li>
<li>
<p>fixed</p>
</li>
<li>
<p>resolve</p>
</li>
<li>
<p>resolves</p>
</li>
<li>
<p>resolved</p>
</li>
</ul>
</div>
</blockquote>
</div>
</div>
<div class="sect2">
<h3 id="__strong_strong_3"><strong>七、创建合并请求</strong></h3>
<div class="ulist">
<ul>
<li>
<p>完成功能分支或者hotfix分支功能后最终要合并到master分支中，需要通过merge request  进行合并，merge  request  不仅仅是一个简单的代码合并，反应的代码的变更记录可以@其他人员进行代码review可以进行讨论，分支后续的变更也能反应在此。</p>
<div class="literalblock">
<div class="content">
<pre>#### **新建合并请求**
 1.    将功能分支或者hotfix分支代码push到gitlab中
 2.    点击 **Merge requests** tab页面</pre>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p><span class="image"><img src="https://docs.gitlab.com/ee/gitlab-basics/img/project_navbar.png " alt="project navbar.png "></span>
   3. 点击 <strong>New merge request</strong> 按钮。</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="https://docs.gitlab.com/ee/gitlab-basics/img/merge_request_new.png " alt="merge request new.png "></span>
   4. <strong>source branch</strong> 选择对应的功能分支或者hotfix分支，<strong>targer branch</strong>选择 master分支，点击<strong>Compare branches and continue</strong>按钮。</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="https://docs.gitlab.com/ee/gitlab-basics/img/merge_request_select_branch.png " alt="merge request select branch.png "></span></p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>为合并请求添加一个标题和描述，选择一个用户review merge request关闭或者接受合并请求，在描述中可以@其他用户进行代码review，</p>
</li>
</ol>
</div>
<div class="paragraph">
<p><span class="image"><img src="https://docs.gitlab.com/ee/gitlab-basics/img/merge_request_page.png " alt="sd"></span></p>
</div>
<div class="ulist">
<ul>
<li>
<p>合并代码时 使用git merge --no-ff 这样会保留分支的commit记录</p>
</li>
<li>
<p>合并commit 技巧，想要将多个commit合并成一个commit，比如想把前两次commit合并成一个commit使用git reset HEAD~2 先撤销过去两个提交，再新建一个commit</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre>  #撤销过去2个提交
 $ git  reset HEAD~2
 $ git add .
 $ git  commit -m 'fix bugs [#2,#5]'
 $ git push</pre>
</div>
</div>
</div>]]></description><link>https://lifengchuan2008.github.io2015-01-31.adoc</link><guid isPermaLink="true">https://lifengchuan2008.github.io2015-01-31.adoc</guid><category><![CDATA[code]]></category><category><![CDATA[ Blog]]></category><category><![CDATA[ git]]></category><category><![CDATA[ gitlab]]></category><pubDate>Sat, 31 Jan 2015 00:00:00 GMT</pubDate></item></channel></rss>